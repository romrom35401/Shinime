// HomeScreen.jsx
import React, { useEffect, useRef, useState } from "react";
import {
  SafeAreaView,
  View,
  Text,
  StyleSheet,
  ImageBackground,
  TouchableOpacity,
  ScrollView,
  Dimensions,
  StatusBar,
  Image,
  Platform,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { LinearGradient } from "expo-linear-gradient";

import colorsTheme from "../theme/colors";
import {
  fetchTrendingGrouped,
  fetchTopRatedGrouped,
  fetchCurrentSeasonGrouped,
  fetchByGenreGrouped,
  fetchFeaturedJikan,
  fetchAniListImageCached,
} from "../api/api";

const { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get("window");

const POSTER_RATIO = 2 / 3;
const colors = {
  background: colorsTheme?.background || "#000",
  text: colorsTheme?.text || "#fff",
  textMuted: colorsTheme?.textLight || "#cfcfcf",
  card: colorsTheme?.card || "#121212",
  accent: colorsTheme?.accent || "#f47521",
  border: colorsTheme?.border || "#1f1f1f",
};

/* ---------- Helpers couleur ---------- */
function normalizeHex(hex) {
  if (!hex) return null;
  let h = String(hex).trim();
  if (h.startsWith("#")) {
    if (h.length === 4) {
      // #abc -> #aabbcc
      h = "#" + h[1] + h[1] + h[2] + h[2] + h[3] + h[3];
    }
    return h.length === 7 ? h.toUpperCase() : null;
  }
  // sometimes AniList returns values like 'rgb(12,34,56)' — try to extract rgb
  const m = h.match(/(\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})/);
  if (m) {
    const r = parseInt(m[1]), g = parseInt(m[2]), b = parseInt(m[3]);
    return rgbToHex(r, g, b);
  }
  return null;
}
function rgbToHex(r, g, b) {
  const toHex = (n) => ("0" + Math.max(0, Math.min(255, Math.round(n))).toString(16)).slice(-2);
  return `#${toHex(r)}${toHex(g)}${toHex(b)}`.toUpperCase();
}
function hexToRgb(hex) {
  const h = normalizeHex(hex) || "#000000";
  const bigint = parseInt(h.slice(1), 16);
  return { r: (bigint >> 16) & 255, g: (bigint >> 8) & 255, b: bigint & 255 };
}
function hexToRgba(hex, alpha = 1) {
  const { r, g, b } = hexToRgb(hex);
  return `rgba(${r},${g},${b},${alpha})`;
}
function darkenHex(hex, percent = 20) {
  const { r, g, b } = hexToRgb(hex);
  const factor = 1 - percent / 100;
  return rgbToHex(r * factor, g * factor, b * factor);
}

/* ---------- Composant principal ---------- */
export default function HomeScreen({ navigation }) {
  const [loading, setLoading] = useState(true);
  const [featured, setFeatured] = useState([]);
  const [trending, setTrending] = useState([]);
  const [topRated, setTopRated] = useState([]);
  const [currentSeason, setCurrentSeason] = useState([]);
  const [genreLists, setGenreLists] = useState({});

  const heroRef = useRef(null);
  const idxRef = useRef(0);
  const [heroIdx, setHeroIdx] = useState(0);
  const autoRef = useRef(null);

  // construit les "pépites" featured (priorise coverColor si dispo)
  function buildFeatured(seasonList = [], trendList = [], n = 8) {
    const now = new Date();
    const cutoff = now.getFullYear() - 2;
    const pool = [...(seasonList || []), ...(trendList || [])].filter(a => a && (a.posterImage || a.coverImage));
    const seen = new Set();
    const uniq = [];
    for (const a of pool) {
      if (seen.has(a.id)) continue;
      seen.add(a.id);
      uniq.push(a);
    }
    uniq.sort((a,b) => ((b.averageScore||0)*1000 + (b.popularity||0)) - ((a.averageScore||0)*1000 + (a.popularity||0)));
    return uniq.slice(0, n).map(a => ({
      id: a.id,
      title: a.title || a.title_en || a.title_romaji,
      desc: (a.description||"").replace(/<\/?[^>]+(>|$)/g,""),
      poster: a.posterImage || a.coverImage || a.image,
      banner: a.bannerImage || a.posterImage || a.coverImage,
      color: a.coverColor || null, // coverColor fourni par api.js
      raw: a
    }));
  }

  useEffect(() => {
    let mounted = true;
    (async () => {
      try {
        setLoading(true);
        const [trend, top, season, gAction, gAdv, gCom, gRom] = await Promise.all([
          fetchTrendingGrouped(30),
          fetchTopRatedGrouped(30),
          fetchCurrentSeasonGrouped(30),
          fetchByGenreGrouped("Action", 20),
          fetchByGenreGrouped("Adventure", 20),
          fetchByGenreGrouped("Comedy", 20),
          fetchByGenreGrouped("Romance", 20),
        ]);

        let gems = buildFeatured(season, trend, 8);
        // fallback: enrich with Jikan if not suffisant
        if (gems.length < 6) {
          try {
            const jikan = await fetchFeaturedJikan(12);
            const add = [];
            for (const j of jikan) {
              if (add.length + gems.length >= 8) break;
              // try AniList image+color
              const img = await fetchAniListImageCached(j.title).catch(() => null);
              add.push({
                id: `jikan-${j.id}`,
                title: j.title,
                desc: j.synopsis_fr || j.title,
                poster: img?.poster || j.cover || j.image,
                banner: img?.banner || j.cover || j.image,
                color: img?.color || null,
                raw: j
              });
            }
            gems = [...gems, ...add].slice(0,8);
          } catch (e) {
            // ignore
          }
        }

        // fallback ultime : trending
        if (gems.length === 0 && trend?.length) {
          gems = (trend || []).slice(0,8).map(a => ({
            id: a.id,
            title: a.title,
            desc: (a.description||"").replace(/<\/?[^>]+(>|$)/g,""),
            poster: a.posterImage || a.coverImage,
            banner: a.bannerImage || a.posterImage || a.coverImage,
            color: a.coverColor || null,
            raw: a
          }));
        }

        const genres = {
          Action: gAction || [],
          Adventure: gAdv || [],
          Comedy: gCom || [],
          Romance: gRom || []
        };

        // exclude featured from lists
        const featuredIds = new Set(gems.map(g => String(g.raw?.id || g.id)));
        const strip = arr => (arr||[]).filter(x => !featuredIds.has(String(x.id)));

        if (!mounted) return;
        setFeatured(gems);
        setTrending(strip(trend));
        setTopRated(strip(top));
        setCurrentSeason(strip(season));
        setGenreLists(genres);

      } catch (e) {
        console.error(e);
      } finally {
        if (mounted) setLoading(false);
      }
    })();
    return () => { mounted = false; clearInterval(autoRef.current); };
  }, []);

  // auto-slide hero
  useEffect(() => {
    if (!featured.length) return;
    clearInterval(autoRef.current);
    idxRef.current = 0;
    setHeroIdx(0);
    autoRef.current = setInterval(() => {
      if (!featured.length) return;
      idxRef.current = (idxRef.current + 1) % featured.length;
      heroRef.current?.scrollTo({ x: idxRef.current * SCREEN_WIDTH, animated: true });
      setHeroIdx(idxRef.current);
    }, 4500);
    return () => clearInterval(autoRef.current);
  }, [featured.length]);

  const onHeroScroll = (e) => {
    const x = e.nativeEvent.contentOffset.x;
    const ix = Math.round(x / SCREEN_WIDTH);
    if (ix !== heroIdx) { idxRef.current = ix; setHeroIdx(ix); }
  };

  const goDetails = (anime) => navigation?.navigate?.("AnimeDetailsScreen", { anime });

  if (loading) {
    return (
      <SafeAreaView style={[styles.container, { alignItems: "center", justifyContent: "center" }]}>
        <StatusBar translucent backgroundColor="transparent" barStyle="light-content" />
        <Ionicons name="play-circle" size={48} color={colors.accent} />
        <Text style={{ color: colors.textMuted, marginTop: 12 }}>Chargement…</Text>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar translucent backgroundColor="transparent" barStyle="light-content" />

      {/* header gradient */}
      <View pointerEvents="none" style={styles.headerGradientWrap}>
        <LinearGradient
          colors={["rgba(0,0,0,0.95)", "rgba(0,0,0,0)"]}
          start={{ x: 0, y: 0 }}
          end={{ x: 0, y: 1 }}
          style={styles.headerGradient}
        />
      </View>

      <View style={styles.headerBar}>
        <View style={styles.logoDot}><Ionicons name="aperture-outline" size={18} color="#fff" /></View>
        <View style={{ flexDirection: "row", alignItems: "center" }}>
          <TouchableOpacity style={{ marginRight: 12 }}><Ionicons name="cast-outline" size={22} color="#fff" /></TouchableOpacity>
          <TouchableOpacity><Ionicons name="search-outline" size={22} color="#fff" /></TouchableOpacity>
        </View>
      </View>

      <ScrollView showsVerticalScrollIndicator={false} contentContainerStyle={{ paddingBottom: 48 }}>
        {/* HERO */}
        <View>
          <ScrollView
            ref={heroRef}
            horizontal
            pagingEnabled
            showsHorizontalScrollIndicator={false}
            onScroll={onHeroScroll}
            scrollEventThrottle={16}
          >
            {featured.map((f, i) => {
              // choose color robustly
              const rawColor = f.color || f.raw?.coverColor || f.raw?.coverImage?.color || null;
              const hex = normalizeHex(rawColor) || "#0D1117";
              const c1 = hexToRgba(hex, 0.18);
              const c2 = hexToRgba(darkenHex(hex, 30), 0.95);

              return (
                <TouchableOpacity key={`${f.id}-${i}`} activeOpacity={0.95} onPress={() => goDetails(f.raw||f)}>
                  <ImageBackground
                    source={{ uri: f.banner || f.poster }}
                    style={styles.heroBg}
                    resizeMode="cover"
                    blurRadius={Platform.OS === 'android' ? 40 : 28}
                  >
                    {/* gradient color-based */}
                    <LinearGradient
                      colors={[c1, c2]}
                      start={{ x: 0.5, y: 0 }}
                      end={{ x: 0.5, y: 1 }}
                      style={StyleSheet.absoluteFill}
                    />

                    <View style={styles.heroStack}>
                      <View style={styles.posterWrap}>
                        <Image source={{ uri: f.poster }} style={styles.posterImg} resizeMode="cover" />
                      </View>

                      <View style={styles.heroTextArea}>
                        <Text style={styles.heroMeta}>16+ • Doublage | Sous-titres</Text>
                        <Text style={styles.heroTitle} numberOfLines={1}>{f.title}</Text>
                        <Text style={styles.heroDesc} numberOfLines={3}>{f.desc}</Text>

                        <View style={styles.heroActions}>
                          <TouchableOpacity style={styles.playBtn} onPress={() => goDetails(f.raw||f)}>
                            <Ionicons name="play" size={18} color="#fff" style={{ marginRight: 8 }} />
                            <Text style={styles.playBtnText}>COMMENCER À REGARDER S1 E1</Text>
                          </TouchableOpacity>

                          <TouchableOpacity style={styles.saveBtn}><Ionicons name="bookmark-outline" size={22} color="#fff" /></TouchableOpacity>
                        </View>
                      </View>
                    </View>
                  </ImageBackground>
                </TouchableOpacity>
              );
            })}
          </ScrollView>

          {/* pagination */}
          <View style={styles.heroSegments}>
            {featured.map((_, i) => (
              <View key={`seg-${i}`} style={styles.segmentTrack}>
                <View style={[styles.segmentFill, { opacity: i === heroIdx ? 1 : 0.25 }]} />
              </View>
            ))}
          </View>
        </View>

        {/* Sections */}
        <SectionRow title="Notre sélection pour vous" data={trending} onPressCard={goDetails} />
        <SectionRow title="Mieux notés" data={topRated} onPressCard={goDetails} />
        <SectionRow title="Saison en cours" data={currentSeason} onPressCard={goDetails} />
        {Object.entries(genreLists).map(([g, list]) => <SectionRow key={g} title={g} data={list} onPressCard={goDetails} />)}
      </ScrollView>
    </SafeAreaView>
  );
}

/* ---------- SectionRow ---------- */
function SectionRow({ title, data = [], onPressCard }) {
  if (!data?.length) return null;
  return (
    <View style={{ paddingTop: 18 }}>
      <Text style={styles.sectionTitle}>{title}</Text>
      <ScrollView horizontal showsHorizontalScrollIndicator={false} contentContainerStyle={{ paddingHorizontal: 12 }}>
        {data.map((a, i) => (
          <TouchableOpacity key={`${a.id||i}-${i}`} onPress={() => onPressCard(a)} style={styles.card} activeOpacity={0.85}>
            <Image source={{ uri: a.posterImage || a.poster || a.coverImage || a.image || "https://via.placeholder.com/300x450" }} style={styles.cardImage} resizeMode="cover" />
          </TouchableOpacity>
        ))}
      </ScrollView>
    </View>
  );
}

/* ---------- Styles ---------- */
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: colors.background },

  headerGradientWrap: { position: "absolute", top: 0, left: 0, right: 0, height: 140, zIndex: 15 },
  headerGradient: { flex: 1 },

  headerBar: { position: "absolute", top: Platform.OS === 'android' ? 36 : 44, left: 14, right: 14, zIndex: 20, flexDirection: "row", alignItems: "center", justifyContent: "space-between" },
  logoDot: { width: 34, height: 34, borderRadius: 34, backgroundColor: colors.accent, alignItems: "center", justifyContent: "center" },

  heroBg: { width: SCREEN_WIDTH, height: SCREEN_HEIGHT * 0.82, justifyContent: "flex-end" }, // un peu plus haut pour poster agrandi
  heroStack: { flex: 1, justifyContent: "flex-end", paddingBottom: 12 },
  posterWrap: {
    alignSelf: "center",
    width: SCREEN_WIDTH * 0.72,
    height: (SCREEN_WIDTH * 0.72) / POSTER_RATIO,
    borderRadius: 14,
    overflow: "hidden",
    backgroundColor: colors.card,
    marginTop: 44,
    elevation: 12,
  },
  posterImg: { width: "100%", height: "100%" },

  heroTextArea: { paddingHorizontal: 16, paddingTop: 12 },
  heroMeta: { color: "#e5e5e5", fontSize: 12, marginBottom: 6, textAlign: "center" },
  heroTitle: { color: "#fff", fontSize: 28, fontWeight: "bold", marginBottom: 8, textAlign: "center" },
  heroDesc: { color: "#ddd", fontSize: 14, lineHeight: 18, marginBottom: 14, textAlign: "center" },

  heroActions: { flexDirection: "row", alignItems: "center", paddingHorizontal: 16 },
  playBtn: { backgroundColor: colors.accent, paddingVertical: 12, paddingHorizontal: 14, borderRadius: 8, flexDirection: "row", alignItems: "center", justifyContent: "center", flexGrow: 1 },
  playBtnText: { color: "#fff", fontWeight: "bold", fontSize: 13 },
  saveBtn: { marginLeft: 12, width: 48, height: 48, borderRadius: 10, borderWidth: StyleSheet.hairlineWidth, borderColor: "rgba(255,255,255,0.25)", backgroundColor: "rgba(0,0,0,0.35)", alignItems: "center", justifyContent: "center" },

  heroSegments: { position: "absolute", bottom: 8, left: 0, right: 0, flexDirection: "row", justifyContent: "center" },
  segmentTrack: { width: 34, height: 4, borderRadius: 4, overflow: "hidden", backgroundColor: "rgba(255,255,255,0.22)", marginHorizontal: 6 },
  segmentFill: { width: "100%", height: "100%", backgroundColor: "#fff" },

  sectionTitle: { color: "#fff", fontSize: 18, fontWeight: "bold", paddingHorizontal: 12, marginBottom: 10 },
  card: { width: SCREEN_WIDTH * 0.36, height: SCREEN_WIDTH * 0.52, borderRadius: 10, overflow: "hidden", backgroundColor: colors.card, marginRight: 12 },
  cardImage: { width: "100%", height: "100%" },
});
